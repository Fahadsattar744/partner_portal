declare const _default: (import("eslint").Linter.Config<import("eslint").Linter.RulesRecord> | {
    plugins: {
        '@typescript-eslint': {
            configs: Record<string, tsParser>;
            meta: tsParser;
            rules: typeof import("@typescript-eslint/eslint-plugin/rules");
        };
        import: any;
    };
    languageOptions: {
        globals: {
            afterAll: false;
            afterEach: false;
            beforeAll: false;
            beforeEach: false;
            describe: false;
            expect: false;
            fit: false;
            it: false;
            jest: false;
            test: false;
            xdescribe: false;
            xit: false;
            xtest: false;
            __dirname: false;
            __filename: false;
            AbortController: false;
            AbortSignal: false;
            AsyncDisposableStack: false;
            atob: false;
            Blob: false;
            BroadcastChannel: false;
            btoa: false;
            Buffer: false;
            ByteLengthQueuingStrategy: false;
            clearImmediate: false;
            clearInterval: false;
            clearTimeout: false;
            CloseEvent: false;
            CompressionStream: false;
            console: false;
            CountQueuingStrategy: false;
            crypto: false;
            Crypto: false;
            CryptoKey: false;
            CustomEvent: false;
            DecompressionStream: false;
            DisposableStack: false;
            DOMException: false;
            Event: false;
            EventTarget: false;
            exports: true;
            fetch: false;
            File: false;
            FormData: false;
            global: false;
            Headers: false;
            MessageChannel: false;
            MessageEvent: false;
            MessagePort: false;
            module: false;
            navigator: false;
            Navigator: false;
            performance: false;
            Performance: false;
            PerformanceEntry: false;
            PerformanceMark: false;
            PerformanceMeasure: false;
            PerformanceObserver: false;
            PerformanceObserverEntryList: false;
            PerformanceResourceTiming: false;
            process: false;
            queueMicrotask: false;
            ReadableByteStreamController: false;
            ReadableStream: false;
            ReadableStreamBYOBReader: false;
            ReadableStreamBYOBRequest: false;
            ReadableStreamDefaultController: false;
            ReadableStreamDefaultReader: false;
            Request: false;
            require: false;
            Response: false;
            setImmediate: false;
            setInterval: false;
            setTimeout: false;
            structuredClone: false;
            SubtleCrypto: false;
            SuppressedError: false;
            TextDecoder: false;
            TextDecoderStream: false;
            TextEncoder: false;
            TextEncoderStream: false;
            TransformStream: false;
            TransformStreamDefaultController: false;
            URL: false;
            URLPattern: false;
            URLSearchParams: false;
            WebAssembly: false;
            WebSocket: false;
            WritableStream: false;
            WritableStreamDefaultController: false;
            WritableStreamDefaultWriter: false;
        };
        parser: any;
        ecmaVersion: number;
        sourceType: string;
        parserOptions: {
            project: string;
            tsconfigRootDir: string;
        };
    };
    rules: {
        '@typescript-eslint/interface-name-prefix': string;
        '@typescript-eslint/explicit-function-return-type': string;
        '@typescript-eslint/explicit-module-boundary-types': string;
        '@typescript-eslint/no-explicit-any': string;
        '@typescript-eslint/no-unused-vars': (string | {
            args: string;
            argsIgnorePattern: string;
            caughtErrors: string;
            caughtErrorsIgnorePattern: string;
            destructuredArrayIgnorePattern: string;
            varsIgnorePattern: string;
            ignoreRestSiblings: boolean;
        })[];
        'import/order': (string | {
            groups: (string | string[])[];
            pathGroups: {
                pattern: string;
                group: string;
                position: string;
            }[];
            pathGroupsExcludedImportTypes: string[];
            alphabetize: {
                order: string;
                caseInsensitive: boolean;
            };
            'newlines-between': string;
        })[];
    };
})[];
export default _default;
